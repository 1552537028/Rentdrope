import React, { createContext, useState, useContext, useEffect } from 'react';
import axios from 'axios';

const CartContext = createContext();

export const useCart = () => {
    const context = useContext(CartContext);
    if (!context) {
        throw new Error("useCart must be used within a CartProvider");
    }
    return context;
};

export const CartProvider = ({ children }) => {
    const [cart, setCart] = useState(() => {
        const savedCart = localStorage.getItem('cart');
        return savedCart ? JSON.parse(savedCart) : [];
    });

    const [availability, setAvailability] = useState({});

    useEffect(() => {
        localStorage.setItem('cart', JSON.stringify(cart));
    }, [cart]);

    useEffect(() => {
        const checkProductAvailability = async (productIds) => {
            try {
                const response = await axios.post('http://localhost:5000/api/products/availability', { ids: productIds });
                const availabilityData = response.data.reduce((acc, product) => {
                    acc[product.id] = product.available;
                    return acc;
                }, {});
                setAvailability(availabilityData);
            } catch (error) {
                console.error('Error fetching product availability:', error);
            }
        };

        if (cart.length > 0) {
            const productIds = cart.map(item => item.id);
            checkProductAvailability(productIds);
        }
    }, [cart]);

    const addToCart = (product) => {
        setCart((prevCart) => {
            const existingProduct = prevCart.find(item => item.id === product.id);
            if (existingProduct) {
                return prevCart.map(item =>
                    item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
                );
            }
            return [...prevCart, { ...product, quantity: 1 }];
        });
    };

    const removeFromCart = (id) => {
        setCart((prevCart) => prevCart.filter(item => item.id !== id));
    };

    const increaseQuantity = (id) => {
        setCart((prevCart) =>
            prevCart.map(item =>
                item.id === id ? { ...item, quantity: item.quantity + 1 } : item
            )
        );
    };

    const decreaseQuantity = (id) => {
        setCart((prevCart) =>
            prevCart.map(item =>
                item.id === id && item.quantity > 1 ? { ...item, quantity: item.quantity - 1 } : item
            )
        );
    };

    const cartLength = cart.reduce((total, item) => total + item.quantity, 0);

    return (
        <CartContext.Provider value={{ cart, cartLength, addToCart, removeFromCart, increaseQuantity, decreaseQuantity, availability }}>
            {children}
        </CartContext.Provider>
    );
};

//nabar

import { Link } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';

const Navbar = () => {
    const { cartLength } = useCart();

    return (
        <nav className="bg-gray-800 p-4 flex justify-between items-center">
            <div>
                <Link to="/" className="text-white">Home</Link>
                <Link to="/products" className="text-white ml-4">Products</Link>
                <Link to="/cart" className="text-white ml-4">
                    Cart {cartLength > 0 && <span className="bg-red-600 text-white rounded-full px-2 ml-1">{cartLength}</span>}
                </Link>
            </div>
        </nav>
    );
};

export default Navbar;

//product details
// src/pages/ProductList.js

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const ProductList = () => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/products');
        setProducts(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };

    fetchProducts();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Product List</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {products.map((product) => (
          <Link to={`/products/${product._id}`} key={product._id}>
            <div className="border rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-200">
              <img
                src={`http://localhost:5000/${product.images[0]}`}
                alt={product.title}
                className="w-full h-48 object-cover"
              />
              <div className="p-4">
                <h2 className="text-xl font-semibold">{product.title}</h2>
                <p className="text-gray-700">${product.price}</p>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default ProductList;


//navbar with search
// src/components/Navbar.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const Navbar = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  const handleSearch = () => {
    if (searchTerm) {
      navigate(`/search/${searchTerm}`);
      setSearchTerm('');
    }
  };

  return (
    <nav className="bg-gray-800 p-4">
      <div className="container mx-auto flex justify-between items-center">
        <h1 className="text-white text-2xl">My Store</h1>
        <div className="flex">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="p-2 rounded-l-md border border-gray-300"
            placeholder="Search for products..."
          />
          <button
            onClick={handleSearch}
            className="bg-blue-500 text-white p-2 rounded-r-md"
          >
            Search
          </button>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, Link } from 'react-router-dom';
import { load } from '@cashfreepayments/cashfree-js';
import { useCart } from '../contexts/CartContext';
import { jwtDecode } from 'jwt-decode';


const Cart = () => {
  const [product, setProduct] = useState(null);
  const { id } = useParams();
  const [user, setUser] = useState(null);
  const { cart, removeFromCart, increaseQuantity, decreaseQuantity } = useCart();

  const handleRemove = (id) => {
    removeFromCart(id);
  };

  const handleIncrease = (id) => {
    increaseQuantity(id);
  };

  const handleDecrease = (id) => {
    decreaseQuantity(id);
  };

  const calculateTotalPrice = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const getUserFromToken = () => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decoded = jwtDecode(token);
        return decoded.id;
      } catch (error) {
        console.error('Invalid or expired token:', error);
        return null;
      }
    }
    return null;
  };

  useEffect(() => {
    const userId = getUserFromToken();
    if (userId) {
      const token = localStorage.getItem('token');
      axios.get('http://localhost:5000/api/auth/me', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
        .then(response => {
          setUser(response.data);
        })
        .catch(error => {
          console.error('Error fetching user details:', error);
        });
    } else {
      console.log("User not logged in or invalid token");
    }
  }, []);

  useEffect(() => {
    const fetchProductAndCategoryProducts = async () => {
      try {
        const productResponse = await axios.get(`http://localhost:5000/api/products/${id}`);
        setProduct(productResponse.data);
      } catch (error) {
        console.error('Error fetching product or category products:', error);
      }
    };

    fetchProductAndCategoryProducts();
  }, [id]);


  const handlePayment = async () => {
    if (!product || !user) {
      console.error("Product or user data is missing");
      alert('Please Login First!');
      return;
    }

    const paymentData = {
      orderAmount: product.price,
      customerDetails: {
        customer_id: user._id,
        customer_phone: user.phone || '9999999999',
        customer_name: user.name,
        customer_email: user.email,
      },
    };

    try {
      const response = await axios.post('http://localhost:5000/api/payment/initiate', paymentData);
      const { payment_session_id } = response.data;

      if (payment_session_id) {
        const cashfree = await load({ mode: 'sandbox' });
        cashfree.checkout({
          paymentSessionId: payment_session_id,
          redirectTarget: '_modal',
        }).then((res) => {
          console.log('Payment initialized', res);
        }).catch(err => {
          console.error('Error during checkout:', err);
        });
      }
    } catch (error) {
      console.error('Payment initiation error:', error);
    }
  };

  return (
    <div className="container mx-auto mt-10 px-4">
      <h1 className="text-2xl font-bold mb-4">Your Cart</h1>
      {cart.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <div>
          <table className="w-full border-collapse hidden md:table">
            <thead>
              <tr>
                <th className="border p-2">Product</th>
                <th className="border p-2">Price</th>
                <th className="border p-2">Quantity</th>
                <th className="border p-2">Total</th>
                <th className="border p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {cart.map((item) => (
                <tr key={item.id}>
                  <td className="border p-2 flex items-center">
                  <Link to={`/products/${item.id}`} className="text-blue-500 hover:underline">
                  <div className='flex flex-row'>
                    <img
                    src={`http://localhost:5000/${item.images[0]}`}
                    alt={item.title}
                    className="w-16 h-16 mr-4"
                    />
                    {item.title}
                  </div>
                  </Link>
                  </td>
                  <td className="border p-2">₹ {item.price}</td>
                  <td className="border p-2">
                    <div className="flex items-center">
                      <button onClick={() => handleDecrease(item.id)} className="bg-gray-300 px-2">
                        -
                      </button>
                      <span className="mx-2">{item.quantity}</span>
                      <button onClick={() => handleIncrease(item.id)} className="bg-gray-300 px-2">
                        +
                      </button>
                    </div>
                  </td>
                  <td className="border p-2">₹ {item.price * item.quantity}</td>
                  <td className="border p-2">
                    <button
                      onClick={() => handleRemove(item.id)}
                      className="bg-red-500 text-white px-2 py-1 rounded"
                    >
                      Remove
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Mobile layout */}
          <div className="md:hidden">
            {cart.map((item) => (
              <div key={item.id} className="border p-4 mb-4 flex flex-col">
                <div className="flex items-center mb-2">
                  <Link to={`/products/${item.id}`} className="text-blue-500 hover:underline">
                  <div className='flex flex-row'>
                    <img
                    src={`http://localhost:5000/${item.images[0]}`}
                    alt={item.title}
                    className="w-16 h-16 mr-4"
                    />
                    {item.title}
                  </div>
                  </Link>
                </div>
                <div className="flex justify-between mb-2">
                  <span>Price: ₹ {item.price}</span>
                  <span>Total: ₹ {item.price * item.quantity}</span>
                </div>
                <div className="flex items-center">
                  <button onClick={() => handleDecrease(item.id)} className="bg-gray-300 px-2">
                    -
                  </button>
                  <span className="mx-2">{item.quantity}</span>
                  <button onClick={() => handleIncrease(item.id)} className="bg-gray-300 px-2">
                    +
                  </button>
                  <button
                    onClick={() => handleRemove(item.id)}
                    className="bg-red-500 text-white px-2 py-1 rounded ml-2"
                  >
                    Remove
                  </button>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-4">
            <h2 className="text-xl font-semibold">
              Total Price: ₹ {calculateTotalPrice()}
            </h2>
            <button className="mt-4 bg-green-500 text-white py-2 px-4 rounded" onClick={handlePayment}>
              Proceed to Checkout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;
