import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { load } from '@cashfreepayments/cashfree-js';
import { useCart } from '../contexts/CartContext';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

function SingleProductPage() {
    const [product, setProduct] = useState(null);
    const [selectedImage, setSelectedImage] = useState('');
    const { id } = useParams();
    const { addToCart, cart } = useCart();

    // Fetch the product details
    useEffect(() => {
        const fetchProduct = async () => {
            try {
                const response = await axios.get(`http://localhost:5000/api/products/${id}`);
                const productData = response.data;

                // Set the product data
                setProduct(productData);

                // Set the initial selected image to the first image
                if (productData.images && productData.images.length > 0) {
                    setSelectedImage(productData.images[0]);
                }
            } catch (error) {
                console.error('Error fetching product:', error);
            }
        };

        fetchProduct();
    }, [id]);

    const handlePayment = async () => {
        if (!product) return;

        const paymentData = {
            orderAmount: product.price,
            customerDetails: {
                customer_id: 'webcodder01',
                customer_phone: '9999999999',
                customer_name: 'Web Codder',
                customer_email: 'webcodder@example.com',
            },
        };

        try {
            const response = await axios.post('http://localhost:5000/api/payment/initiate', paymentData);
            const { payment_session_id } = response.data;

            if (payment_session_id) {
                const cashfree = await load({ mode: 'sandbox' });
                cashfree.checkout({
                    paymentSessionId: payment_session_id,
                    redirectTarget: '_modal',
                }).then((res) => {
                    console.log('Payment initialized', res);
                }).catch(err => {
                    console.error('Error during checkout:', err);
                });
            }
        } catch (error) {
            console.error('Payment initiation error:', error);
        }
    };

    const handleAddToCart = () => {
        if (product) {
            const productToAdd = {
                id: product._id, // Assuming product has an _id field from MongoDB
                title: product.title,
                price: product.price,
                images: product.images, // Add images if necessary for cart display
            };

            const isProductInCart = cart.some(item => item.id === productToAdd.id);

            if (isProductInCart) {
                alert(`${product.title} is already in your cart!`); // You can replace this with a toast message
            } else {
                addToCart(productToAdd);
                alert(`${product.title} has been added to your cart!`);
            }
        }
    };

    // Loading state while the product data is being fetched
    if (!product) return <div>Loading...</div>;

    return (
        <div>
            <Navbar />
            <div className="lg:flex lg:flex-row mt-10 sm:flex sm:flex-col">
                <div className="lg:flex lg:flex-row sm:flex sm:flex-col-reverse">
                    {/* Image Thumbnails */}
                    <div className="lg:flex lg:flex-col gap-2 space-y-5 mr-7 mt-10 sm:flex sm:flex-row sm:overflow-x-scroll lg:overflow-hidden">
                        {product.images.length > 0 ? (
                            product.images.map((image, index) => (
                                <img
                                    key={index}
                                    src={`http://localhost:5000/uploads/${image}`} // Fix path: assuming images are served at /uploads/
                                    alt={`product-thumbnail-${index}`}
                                    onClick={() => setSelectedImage(image)}
                                    className="cursor-pointer h-20 w-20 object-cover border rounded-lg"
                                />
                            ))
                        ) : (
                            <p>No images available</p>
                        )}
                    </div>

                    {/* Main Product Image */}
                    <div className="flex-1 sm:w-full">
                        <img
                            src={`http://localhost:5000/uploads/${selectedImage}`} // Fix path for the selected image
                            alt="Selected"
                            className="w-96 h-96 max-w-full border rounded-lg"
                        />
                    </div>
                </div>

                {/* Product Details Section */}
                <div className="mt-6 ml-7 lg:w-1/2 sm:w-full">
                    <h1 className="text-2xl font-bold mb-6">{product.title}</h1>
                    <p className="mt-4 text-gray-700 text-sm">{product.description || 'No description available'}</p>

                    <br />
                    <hr />
                    <br />

                    {/* Discount and Price */}
                    <div className="flex flex-row gap-2 mt-2">
                        {product.offer && (
                            <p className="text-red-300 text-lg font-light">-{product.offer}%</p>
                        )}
                        <p className="text-2xl font-normal">â‚¹ {product.price}</p>
                    </div>

                    <hr />

                    {/* Buy Now and Add to Cart Buttons */}
                    <div className="flex flex-col lg:w-96 sm:w-64">
                        <button onClick={handlePayment} className="mt-4 bg-amber-500 text-white py-2 px-6 rounded-full text-lg">
                            Buy Now
                        </button>
                        <button onClick={handleAddToCart} className="mt-4 bg-amber-300 text-white py-2 px-6 rounded-full text-lg">
                            Add To Cart
                        </button>
                    </div>
                </div>
            </div>
            <Footer />
        </div>
    );
}

export default SingleProductPage;





with payment without image


import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { load } from '@cashfreepayments/cashfree-js';
import { useCart } from '../contexts/CartContext';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import {jwtDecode} from 'jwt-decode';  // Correct import for jwt-decode

function SingleProductPage() {
  const [product, setProduct] = useState(null);
  const [selectedImage, setSelectedImage] = useState('');
  const { id } = useParams();
  const { addToCart, cart } = useCart();
  const [user, setUser] = useState(null);  // To store user details

  // Function to fetch user from token
  const getUserFromToken = () => {
    const token = localStorage.getItem('token');  // Assuming the token is stored in localStorage
    if (token) {
      try {
        const decoded = jwtDecode(token); // Decode the JWT token
        return decoded.id;  // Return user ID from decoded token
      } catch (error) {
        console.error('Invalid or expired token:', error);
        return null;
      }
    }
    return null;
  };

  // Fetch user details when the component mounts
  useEffect(() => {
    const userId = getUserFromToken();
    if (userId) {
      // Fetch the user details from the backend using the decoded `id`
      const token = localStorage.getItem('token');
      axios.get('http://localhost:5000/api/auth/me', {
        headers: {
          Authorization: `Bearer ${token}` // Pass token in the Authorization header
        }
      })
        .then(response => {
          setUser(response.data);
        })
        .catch(error => {
          console.error('Error fetching user details:', error);
        });
    } else {
      console.log("User not logged in or invalid token");
    }
  }, []);

  // Fetch product details
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/products/${id}`);
        setProduct(response.data);
        if (response.data.images && response.data.images.length > 0) {
          setSelectedImage(response.data.images[0]);
        }
      } catch (error) {
        console.error('Error fetching product:', error);
      }
    };

    fetchProduct();
  }, [id]);

  // Handle payment initiation
  const handlePayment = async () => {
    if (!product || !user) {
      console.error("Product or user data is missing");
      return;
    }

    const paymentData = {
      orderAmount: product.price,
      customerDetails: {
        customer_id: user._id,
        customer_phone: user.phone || '9999999999',
        customer_name: user.name,
        customer_email: user.email,
      },
    };

    try {
      const response = await axios.post('http://localhost:5000/api/payment/initiate', paymentData);
      const { payment_session_id } = response.data;

      if (payment_session_id) {
        const cashfree = await load({ mode: 'sandbox' });
        cashfree.checkout({
          paymentSessionId: payment_session_id,
          redirectTarget: '_modal',
        }).then((res) => {
          console.log('Payment initialized', res);
        }).catch(err => {
          console.error('Error during checkout:', err);
        });
      }
    } catch (error) {
      console.error('Payment initiation error:', error);
    }
  };

  // Handle adding to the cart
  const handleAddToCart = () => {
    if (product) {
      const productToAdd = {
        id: product._id,
        title: product.title,
        price: product.price,
        images: product.images,
      };

      const isProductInCart = cart.some(item => item.id === productToAdd.id);

      if (isProductInCart) {
        alert(`${product.title} is already in your cart!`);
      } else {
        addToCart(productToAdd);
        alert(`${product.title} has been added to your cart!`);
      }
    }
  };

  // If product is not yet fetched, show loading
  if (!product) return <div>Loading...</div>;

  return (
    <div>
      <Navbar />
      <div className='lg:flex lg:flex-row mt-10 sm:flex sm:flex-col'>
        <div className="lg:flex lg:flex-row sm:flex sm:flex-col-reverse">
          <div className="lg:flex lg:flex-col gap-2 space-y-5 mr-7 mt-10 sm:flex sm:flex-row sm:overflow-x-scroll lg:overflow-hidden">
            {product.images.map((image, index) => (
              <img
                key={index}
                src={image}
                alt="Product"
                className="w-28 h-28 border rounded-lg cursor-pointer"
                onClick={() => setSelectedImage(image)}
              />
            ))}
          </div>
          <div>
            <img src={selectedImage} alt="Product" className="h-96 w-96 border-2 border-gray-200" />
          </div>
        </div>
        <div className='flex flex-col ml-4 mt-7'>
          <h1 className='text-3xl'>{product.title}</h1>
          <p className='mt-3'>{product.description}</p>
          <p className='text-xl mt-5'>Price: â‚¹{product.price}</p>
          <button className='bg-yellow-400 px-5 py-3 rounded-xl mt-4' onClick={handleAddToCart}>Add to Cart</button>
          <button className='bg-blue-400 px-5 py-3 rounded-xl mt-4' onClick={handlePayment}>Buy Now</button>
        </div>
      </div>
      <Footer />
    </div>
  );
}

export default SingleProductPage;
