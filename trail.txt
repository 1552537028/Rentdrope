import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import { load } from "@cashfreepayments/cashfree-js";
import { useCart } from "../contexts/CartContext";
import Footer from "../components/Footer";
import { jwtDecode } from "jwt-decode";
import ReviewSummaryWithDistribution from "../components/ReviewSummaryWithDistribution";
import ReviewForm from "../components/ReviewForm";
import ReviewList from "../components/ReviewList";

function SingleProduct() {
  const [product, setProduct] = useState(null);
  const [selectedImage, setSelectedImage] = useState("");
  const { id } = useParams();
  const { addToCart, cart } = useCart();
  const [user, setUser] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [showReviewForm, setShowReviewForm] = useState(false);

  // Get user from token
  const getUserFromToken = () => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        return decoded.id;
      } catch (error) {
        console.error("Invalid or expired token:", error);
        return null;
      }
    }
    return null;
  };

  // Fetch user data
  useEffect(() => {
    const userId = getUserFromToken();
    if (userId) {
      const token = localStorage.getItem("token");
      axios
        .get("http://localhost:5000/api/auth/me", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })
        .then((response) => {
          setUser(response.data);
        })
        .catch((error) => {
          console.error("Error fetching user details:", error);
        });
    } else {
      console.log("User not logged in or invalid token");
    }
  }, []);

  // Fetch product and reviews
  useEffect(() => {
    const fetchProductAndReviews = async () => {
      try {
        // Fetch product details
        const productResponse = await axios.get(`http://localhost:5000/api/products/${id}`);
        setProduct(productResponse.data);
        if (productResponse.data.images && productResponse.data.images.length > 0) {
          setSelectedImage(productResponse.data.images[0]);
        }

        // Fetch reviews for this product
        const reviewsResponse = await axios.get(`http://localhost:5000/api/reviews/products/${id}`);
        setReviews(reviewsResponse.data);
      } catch (error) {
        console.error("Error fetching product or reviews:", error);
      }
    };

    fetchProductAndReviews();
  }, [id]);

  // Handle payment
  const handlePayment = async () => {
    if (!product || !user) {
      console.error("Product or user data is missing");
      alert("Please Login First!");
      return;
    }

    const paymentData = {
      orderAmount: product.price,
      customerDetails: {
        customer_id: user._id,
        customer_phone: user.phone || "9999999999",
        customer_name: user.name,
        customer_email: user.email,
      },
    };

    try {
      const response = await axios.post("http://localhost:5000/api/payment/initiate", paymentData);
      const { payment_session_id } = response.data;

      if (payment_session_id) {
        const cashfree = await load({ mode: "sandbox" });
        cashfree
          .checkout({
            paymentSessionId: payment_session_id,
            redirectTarget: "_modal",
          })
          .then((res) => {
            console.log("Payment initialized", res);
          })
          .catch((err) => {
            console.error("Error during checkout:", err);
          });
      }
    } catch (error) {
      console.error("Payment initiation error:", error);
    }
  };

  // Handle add to cart
  const handleAddToCart = () => {
    if (product) {
      const productToAdd = {
        id: product._id,
        title: product.title,
        price: product.price,
        images: product.images,
      };

      const isProductInCart = cart.some((item) => item.id === productToAdd.id);

      if (isProductInCart) {
        alert(`${product.title} is already in your cart!`);
      } else {
        addToCart(productToAdd);
        alert(`${product.title} has been added to your cart!`);
      }
    }
  };

  // Handle adding a new review
  const handleAddReview = (newReview) => {
    setReviews((prevReviews) => [newReview, ...prevReviews]);
  };

  if (!product) return <div>Loading...</div>;

  return (
    <div>
      <div className="lg:flex lg:flex-row mt-10 sm:flex sm:flex-col">
        <div className="lg:flex lg:flex-row sm:flex sm:flex-col-reverse">
          <div className="lg:flex lg:flex-col gap-2 space-y-5 mr-7 mt-10 sm:flex sm:flex-row">
            {product.images.map((image, index) => (
              <img
                key={index}
                src={`http://localhost:5000/${image}`}
                alt="Product"
                className="w-14 h-14 border rounded-lg cursor-pointer"
                onClick={() => setSelectedImage(image)}
              />
            ))}
          </div>
          <div>
            <img
              src={`http://localhost:5000/${selectedImage}`}
              alt="Product"
              className="h-96 w-96 sm:ml-3 border-2 border-gray-400"
            />
          </div>
        </div>
        <div className="flex flex-col ml-4 mt-7">
          <h1 className="text-3xl">{product.title}</h1>
          <p className="mt-3">{product.disc}</p>
          <hr />
          <p className="text-xl mt-5">Price: â‚¹{product.price}</p>
          <p className="text-xl mt-5 text-red-600">{product.offer}%</p>
          <hr />
          <button
            className="bg-yellow-300 px-5 py-3 rounded-xl mt-4 mr-4"
            onClick={handleAddToCart}
          >
            Add to Cart
          </button>
          <button
            className="bg-yellow-500 px-5 py-3 rounded-xl mt-4 mr-4"
            onClick={handlePayment}
          >
            Buy Now
          </button>
        </div>
      </div>

      <div className="mt-10">
        <ReviewSummaryWithDistribution
          reviews={reviews}
          setShowReviewForm={setShowReviewForm}
          showReviewForm={showReviewForm}
        />

        {showReviewForm && (
          <ReviewForm
            productId={id}
            onAddReview={handleAddReview}
            setShowReviewForm={setShowReviewForm}
          />
        )}

        <ReviewList reviews={reviews} />
      </div>

      <Footer />
    </div>
  );
}

export default SingleProduct;

//addproduct
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function ProductPage() {
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState('');
  const [offer, setOffer] = useState('');
  const [disc, setDisc] = useState('');
  const [category, setCategory] = useState('');
  const [selectedImages, setSelectedImages] = useState([]);
  const [previewImages, setPreviewImages] = useState([]);
  const [products, setProducts] = useState([]);
  const [uploadStatus, setUploadStatus] = useState('');

  useEffect(() => {
    // Fetch products on component mount
    axios.get('http://localhost:5000/api/products')
      .then(response => setProducts(response.data))
      .catch(error => console.error('Error fetching products:', error));
  }, []);

  const handleImageChange = (e) => {
    const files = Array.from(e.target.files);
    setSelectedImages(files);

    const previews = files.map(file => URL.createObjectURL(file));
    setPreviewImages(previews);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const formData = new FormData();
    formData.append('title', title);
    formData.append('price', price);
    formData.append('offer', offer);
    formData.append('disc', disc);
    formData.append('category', category);
    selectedImages.forEach(image => {
      formData.append('images', image);
    });

    axios.post('http://localhost:5000/api/products', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
      .then(response => {
        setUploadStatus('Product uploaded successfully!');
        setTitle('');
        setPrice('');
        setOffer('');
        setDisc('');
        setCategory('');
        setSelectedImages([]);
        setPreviewImages([]);
        setProducts([...products, response.data]);
      })
      .catch(error => {
        console.error('Error uploading product:', error.response ? error.response.data : error.message);
        setUploadStatus('Failed to upload product.');
      });
  };

  return (
    <div>
      <h1>Product Upload and Display</h1>
      <form onSubmit={handleSubmit}>
        <label>
          Title:
          <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} required />
        </label>
        <br />
        <label>
          Price:
          <input type="number" value={price} onChange={(e) => setPrice(e.target.value)} required />
        </label>
        <br />
        <label>
          Offer (%):
          <input type="number" value={offer} onChange={(e) => setOffer(e.target.value)} />
        </label>
        <br />
        <label>
          Description:
          <textarea value={disc} onChange={(e) => setDisc(e.target.value)} required />
        </label>
        <br />
        <label>
          Category:
          <input type="text" value={category} onChange={(e) => setCategory(e.target.value)} required />
        </label>
        <br />
        <label>
          Select Images:
          <input
            type="file"
            multiple
            accept="image/*"
            onChange={handleImageChange}
          />
        </label>
        <br />
        <button type="submit">Upload Product</button>
      </form>
      <div>
        <h2>Image Previews</h2>
        <div className="image-previews">
          {previewImages.map((preview, index) => (
            <img
              key={index}
              src={preview}
              alt={`Preview ${index}`}
              style={{ width: '150px', height: 'auto', margin: '5px' }}
            />
          ))}
        </div>
      </div>
      {uploadStatus && <p>{uploadStatus}</p>}
      <div>
        <h2>Uploaded Products</h2>
        <div className="products-list">
          {products.map(product => (
            <div key={product._id} className="product-card">
              <img src={`http://localhost:5000/${product.images[0]}`} alt={product.title} style={{ width: '150px', height: 'auto' }} />
              <h2>{product.title}</h2>
              <p>${product.price}</p>
              {product.offer > 0 && <p>Offer: {product.offer}%</p>}
              <p>{product.disc}</p>
              <p>Category: {product.category}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default ProductPage;

//server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const productRoutes = require('./routes/products');
const path = require('path');
require('dotenv').config();
const axios = require('axios');
const crypto = require('crypto');

//paymentrout
const paymentRoutes = require('./routes/payment');
//server
const app = express();
const PORT = process.env.PORT || 5000;

// Serve static files (images) from the 'uploads' directory
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Ensure uploads directory exists
const fs = require('fs');
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

// Middleware
app.use(cors({
  origin: 'http://localhost:3000', // Adjust this as needed
}));
app.use(bodyParser.json());
app.use('/api/products', productRoutes);
app.use('/api/payment', paymentRoutes);
app.use(express.urlencoded({extended: true}))
// Start server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


// routes/payment.js
const express = require('express');
const router = express.Router();
const crypto = require('crypto');
const { Cashfree } = require('cashfree-pg');

// Configure Cashfree
Cashfree.XClientId = process.env.CLIENT_ID;
Cashfree.XClientSecret = process.env.CLIENT_SECRET;
Cashfree.XEnvironment = Cashfree.Environment.SANDBOX;

// Function to generate a unique order ID
function generateOrderId() {
    const uniqueId = crypto.randomBytes(16).toString('hex');
    const hash = crypto.createHash('sha256');
    hash.update(uniqueId);
    return hash.digest('hex').substr(0, 12);
}

// Payment initiation route
router.post('/initiate', async (req, res) => {
    const { orderAmount, customerDetails } = req.body;

    if (!orderAmount || !customerDetails) {
        return res.status(400).json({ message: "Order amount and customer details are required." });
    }

    const request = {
        order_id: generateOrderId(),
        order_amount: orderAmount,
        order_currency: 'INR',
        customer_details: customerDetails,
    };

    try {
        const response = await Cashfree.PGCreateOrder("2023-08-01", request);
        res.json(response.data);
    } catch (error) {
        console.error('Payment initiation error:', error);
        res.status(500).json({ error: 'Payment initiation failed', details: error.message });
    }
});

// Payment verification route
router.post('/verify', async (req, res) => {
    const { orderId } = req.body;

    try {
        const response = await Cashfree.PGOrderFetchPayments("2023-08-01", orderId);
        res.json(response.data);
    } catch (error) {
        console.error('Payment verification error:', error);
        res.status(500).json({ message: "Error verifying payment." });
    }
});

module.exports = router;







WORKING CODE IN SINGLE PAGE 


// Import required modules
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');
const crypto = require('crypto');
const { Cashfree } = require('cashfree-pg');
require('dotenv').config();
const fs = require('fs');

// Initialize the Express app
const app = express();
const PORT = process.env.PORT || 5000;

// Configure Cashfree
Cashfree.XClientId = process.env.CLIENT_ID;
Cashfree.XClientSecret = process.env.CLIENT_SECRET;
Cashfree.XEnvironment = Cashfree.Environment.SANDBOX;

// Middleware
app.use(cors({
    origin: 'http://localhost:3000', // Adjust this based on your frontend URL
}));
app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files (e.g., images) from the 'uploads' directory
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Ensure uploads directory exists
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir);
}

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

// Function to generate a unique order ID
function generateOrderId() {
    const uniqueId = crypto.randomBytes(16).toString('hex');
    const hash = crypto.createHash('sha256');
    hash.update(uniqueId);
    return hash.digest('hex').substr(0, 12);
}

// Payment initiation route
app.post('/api/payment/initiate', async (req, res) => {
    const { orderAmount, customerDetails } = req.body;

    if (!orderAmount || !customerDetails) {
        return res.status(400).json({ message: "Order amount and customer details are required." });
    }

    const request = {
        order_id: generateOrderId(),
        order_amount: orderAmount,
        order_currency: 'INR',
        customer_details: customerDetails,
    };

    try {
        const response = await Cashfree.PGCreateOrder("2023-08-01", request);
        res.json(response.data);
    } catch (error) {
        console.error('Payment initiation error:', error); // Log the error for debugging
        res.status(500).json({ error: 'Payment initiation failed', details: error.message });
    }
});

// Payment verification route (if needed)
app.post('/api/payment/verify', async (req, res) => {
    const { orderId } = req.body;

    try {
        const response = await Cashfree.PGOrderFetchPayments("2023-08-01", orderId);
        res.json(response.data);
    } catch (error) {
        console.error('Payment verification error:', error);
        res.status(500).json({ message: "Error verifying payment." });
    }
});

// Products route (Import your products route file here)
const productRoutes = require('./routes/products');
app.use('/api/products', productRoutes);

// Home route
app.get('/', (req, res) => {
    res.send('Hello World!');
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
